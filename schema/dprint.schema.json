{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "dprint configuration",
    "type": "object",
    "definitions": {
        "useBraces": {
            "type": "string",
            "description": "If braces should be used or not.",
            "oneOf": [
                { "const": "maintain", "description": "Uses braces if they're used. Doesn't use braces if they're not used." },
                { "const": "always", "description": "Forces the use of braces. Will add them if they aren't used." },
                { "const": "preferNone", "description": "Forces no braces when when the header is one line and body is one line. Otherwise forces braces." }
            ],
            "default": "maintain"
        },
        "bracePosition": {
            "type": "string",
            "description": "Where to place the brace.",
            "oneOf": [
                { "const": "maintain", "description": "Maintains the brace being on the next line or the same line." },
                { "const": "sameLine", "description": "Forces the brace to be on the same line." },
                { "const": "nextLine", "description": "Forces the brace to be on the next line." },
                { "const": "nextLineIfHanging", "description": "Forces the brace to be on the next line if the same line is hanging, but otherwise uses the next." }
            ],
            "default": "nextLineIfHanging"
        },
        "nextControlFlowPosition": {
            "type": "string",
            "description": "Where to place the next control flow within a control flow statement.",
            "oneOf": [
                { "const": "maintain", "description": "Maintains the next control flow being on the next line or the same line." },
                { "const": "sameLine", "description": "Forces the next control flow to be on the same line." },
                { "const": "nextLine", "description": "Forces the next control flow to be on the next line." }
            ],
            "default": "nextLine"
        }
    },
    "properties": {
        "lineWidth": {
            "type": "number",
            "description": "The width of a line the printer will try to stay under. Note that the printer may exceed this width in certain cases.",
            "default": 120
        },
        "indentSize": {
            "type": "number",
            "description": "The number of spaces for an indent. This option is ignored when using tabs.",
            "default": 4
        },
        "useTabs": {
            "type": "boolean",
            "description": "Whether to use tabs (true) or spaces (false).",
            "default": false
        },
        "semiColons": {
            "type": "boolean",
            "description": "Whether statements should use semi-colons.",
            "default": true
        },
        "singleQuotes": {
            "type": "boolean",
            "description": "Whether to use single quotes (true) or double quotes (false).",
            "default": false
        },
        "newLineKind": {
            "type": "string",
            "description": "The kind of newline to use.",
            "oneOf": [
                { "const": "auto", "description": "For each file, uses the newline kind found at the end of the last line." },
                { "const": "crlf", "description": "Uses carriage return, line feed." },
                { "const": "lf", "description": "Uses line feed." },
                { "const": "system", "description": "Uses the system standard (ex. crlf on Windows)." }
            ],
            "default": "auto"
        },
        "useBraces": {
            "$ref": "#/definitions/useBraces"
        },
        "bracePosition": {
            "$ref": "#/definitions/bracePosition"
        },
        "nextControlFlowPosition": {
            "$ref": "#/definitions/nextControlFlowPosition"
        },

        "debuggerStatement.semiColon": {
            "type": "boolean"
        },
        "directive.semiColon": {
            "type": "boolean"
        },
        "doWhileStatement.semiColon": {
            "type": "boolean"
        },
        "expressionStatement.semiColon": {
            "type": "boolean"
        },
        "ifStatement.semiColon": {
            "type": "boolean"
        },
        "importDeclaration.semiColon": {
            "type": "boolean"
        },
        "returnStatement.semiColon": {
            "type": "boolean"
        },
        "throwStatement.semiColon": {
            "type": "boolean"
        },
        "typeAlias.semiColon": {
            "type": "boolean"
        },

        "ifStatement.useBraces": {
            "$ref": "#/definitions/useBraces"
        },
        "whileStatement.useBraces": {
            "$ref": "#/definitions/useBraces"
        },

        "classDeclaration.bracePosition": {
            "$ref": "#/definitions/bracePosition"
        },
        "doWhileStatement.bracePosition": {
            "$ref": "#/definitions/bracePosition"
        },
        "functionDeclaration.bracePosition": {
            "$ref": "#/definitions/bracePosition"
        },
        "ifStatement.bracePosition": {
            "$ref": "#/definitions/bracePosition"
        },
        "tryStatement.bracePosition": {
            "$ref": "#/definitions/bracePosition"
        },
        "whileStatement.bracePosition": {
            "$ref": "#/definitions/bracePosition"
        },

        "ifStatement.nextControlFlowPosition": {
            "$ref": "#/definitions/nextControlFlowPosition"
        },
        "tryStatement.nextControlFlowPosition": {
            "$ref": "#/definitions/nextControlFlowPosition"
        }
    }
}
