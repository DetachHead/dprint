# Made with the help of:
# https://github.com/denoland/deno/blob/master/.github/workflows/ci.yml

name: CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.kind }} ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - os: macOS-latest
            kind: test_release
          - os: windows-2019
            kind: test_release
          - os: ubuntu-16.04
            kind: test_release
          - os: ubuntu-16.04
            kind: test_debug

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install wasm32 target
      run: rustup target add wasm32-unknown-unknown

    # CACHE SETUP
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ matrix.config.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ matrix.config.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ matrix.config.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    # BUILD
    - name: Build test plugin
      run: cargo build --manifest-path=crates/test-plugin/Cargo.toml --release --target=wasm32-unknown-unknown

    - name: Build debug
      if: matrix.config.kind == 'test_debug'
      run: cargo build --verbose
    - name: Build release
      if: matrix.config.kind == 'test_release'
      run: cargo build --release --locked --all-targets --verbose

    # TEST
    - name: Test debug
      if: matrix.config.kind == 'test_debug'
      run: cargo test --verbose
    - name: Test release
      if: matrix.config.kind == 'test_release'
      run: cargo test --release --locked --all-targets --verbose

    # INSTALLER
    - name: Setup NSIS (Windows)
      if: startsWith(matrix.config.os, 'windows') && matrix.config.kind == 'test_release'
      run: |
        mkdir NSIS_Plugins
        cd NSIS_Plugins
        iwr https://nsis.sourceforge.io/mediawiki/images/7/7f/EnVar_plugin.zip -OutFile envar_plugin.zip
        powershell -command "if ((CertUtil -hashfile envar_plugin.zip SHA1)[1] -replace ' ','' -ne '586c52fd2f44dcf1b5b0556bbd5dd3442f9301cd') { exit 1 }"
        tar -xf envar_plugin.zip
        rm envar_plugin.zip
    - name: Create installer (Windows)
      uses: joncloud/makensis-action@v2.0
      if: startsWith(matrix.config.os, 'windows') && matrix.config.kind == 'test_release'
      with:
        additional-plugin-paths: ${{ github.workspace }}/NSIS_Plugins/Plugins/
        script-file: ${{ github.workspace }}/scripts/installer/dprint-installer.nsi
    - name: Sign installer (Windows)
      if: startsWith(matrix.config.os, 'windows') && matrix.config.kind == 'test_release'
      run: |
        "${{ secrets.SELF_SIGNED_CERT_PFX }}" | Out-File -FilePath cert.txt
        CertUtil -decode cert.txt cert.pfx
        & 'C:\Program Files (x86)\Windows Kits\10\bin\x86\signtool' sign /f "cert.pfx" /p ${{ secrets.SELF_SIGNED_CERT_PFX_PASSWORD }} /td sha256 /fd sha256 scripts/installer/dprint-x86_64-pc-windows-msvc-installer.exe

    # PRE-RELEASE
    - name: Pre-release (Linux)
      id: linux_pre_release
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.kind == 'test_release'
      run: |
          cd target/release
          zip -r dprint-x86_64-unknown-linux-gnu.zip dprint
          echo ::set-output name=BINARY_CHECKSUM::$(shasum -a 256 dprint | awk '{print $1}')
    - name: Pre-release (Mac)
      id: mac_pre_release
      if: startsWith(matrix.config.os, 'macOS') && matrix.config.kind == 'test_release'
      # .tar.gz file is for homebrew binary release
      run: |
          cd target/release
          zip -r dprint-x86_64-apple-darwin.zip dprint
          tar -czf dprint-x86_64-apple-darwin.tar.gz dprint
          echo ::set-output name=BINARY_CHECKSUM::$(shasum -a 256 dprint | awk '{print $1}')
    - name: Pre-release (Windows)
      id: windows_pre_release
      if: startsWith(matrix.config.os, 'windows') && matrix.config.kind == 'test_release'
      run: |
          Compress-Archive -CompressionLevel Optimal -Force -Path target/release/dprint.exe -DestinationPath target/release/dprint-x86_64-pc-windows-msvc.zip
          echo ::set-output name=BINARY_CHECKSUM::$(shasum -a 256 target/release/dprint.exe | awk '{print $1}')
          echo ::set-output name=INSTALLER_CHECKSUM::$(shasum -a 256 scripts/installer/dprint-x86_64-pc-windows-msvc-installer.exe | awk '{print $1}')

    - name: Release
      uses: softprops/action-gh-release@v1
      if: matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          target/release/dprint-x86_64-pc-windows-msvc.zip
          scripts/installer/dprint-x86_64-pc-windows-msvc-installer.exe
          target/release/dprint-x86_64-unknown-linux-gnu.zip
          target/release/dprint-x86_64-apple-darwin.zip
          target/release/dprint-x86_64-apple-darwin.tar.gz
        body: |
          ## Changes

            * TODO

          ## Install

          Linux/Mac/WSL:

          ```bash
          curl -fsSL https://dprint.dev/install.sh | sh
          ```

          Windows (use Powershell or installer below):

          ```powershell
          iwr https://dprint.dev/install.ps1 -useb | iex
          ```

          Homebrew (Mac):

          ```bash
          brew tap dprint/dprint
          brew install dprint
          ```

          ## SHA-256 Checksums

          |System|Binary|
          |:--|:--|
          |Linux|{{steps.linux_pre_release.outputs.BINARY_CHECKSUM}}|
          |Mac|{{steps.mac_pre_release.outputs.BINARY_CHECKSUM}}|
          |Windows|{{steps.windows_pre_release.outputs.BINARY_CHECKSUM}}|
          |Windows Installer|{{steps.windows_pre_release.outputs.INSTALLER_CHECKSUM}}|
        draft: true
