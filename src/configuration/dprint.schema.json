{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "dprint configuration",
    "type": "object",
    "properties": {
        "lineWidth": {
            "type": "number",
            "description": "The width of a line the printer will try to stay under. Note that the printer may exceed this width in certain cases.",
            "default": 120
        },
        "indentSize": {
            "type": "number",
            "description": "The number of spaces for an indent. This option is ignored if using tabs.",
            "default": 4
        },
        "useTabs": {
            "type": "boolean",
            "description": "Whether to use tabs (false) or spaces (true).",
            "default": false
        },
        "semiColons": {
            "type": "boolean",
            "description": "Whether statements should use semi-colons.",
            "default": true
        },
        "singleQuotes": {
            "type": "boolean",
            "description": "Whether to use single quotes (true) or double quotes (false).",
            "default": false
        },
        "newLineKind": {
            "type": "string",
            "description": "The style of newline.",
            "oneOf": [
                { "const": "auto", "description": "Uses the newline kind found at the end of the first line." },
                { "const": "crlf", "description": "Uses carriage return, line feed." },
                { "const": "lf", "description": "Uses line feed." },
                { "const": "system", "description": "Uses the system standard (ex. crlf on Windows)." }
            ],
            "default": "auto"
        },
        "forceBraces": {
            "type": "boolean",
            "description": "Whether to force the use of braces for statements that allow them to be optional.",
            "default": true
        },

        "directive.semiColon": {
            "type": "boolean"
        },
        "doWhileStatement.semiColon": {
            "type": "boolean"
        },
        "expressionStatement.semiColon": {
            "type": "boolean"
        },
        "ifStatement.semiColon": {
            "type": "boolean"
        },
        "importDeclaration.semiColon": {
            "type": "boolean"
        },
        "typeAlias.semiColon": {
            "type": "boolean"
        },

        "ifStatement.forceBraces": {
            "type": "boolean"
        },
        "whileStatement.forceBraces": {
            "type": "boolean"
        }
    }
}