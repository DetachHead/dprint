// Do not edit this file! It is code generated based on dprint.schema.json

/**
 * User specified configuration.
 */
export interface Configuration {
    /**
     * The width of a line the printer will try to stay under. Note that the printer may exceed this width in certain cases.
     * @default 120
     */
    lineWidth?: number;
    /**
     * The number of spaces for an indent. This option is ignored if using tabs.
     * @default 4
     */
    indentSize?: number;
    /**
     * Whether to use tabs (false) or spaces (true).
     * @default false
     */
    useTabs?: boolean;
    /**
     * Whether statements should use semi-colons.
     * @default true
     */
    semiColons?: boolean;
    /**
     * Whether to use single quotes (true) or double quotes (false).
     * @default false
     */
    singleQuotes?: boolean;
    /**
     * The kind of newline to use.
     * @default "auto"
     * @value "auto" - Uses the newline kind found at the end of the first line.
     * @value "crlf" - Uses carriage return, line feed.
     * @value "lf" - Uses line feed.
     * @value "system" - Uses the system standard (ex. crlf on Windows).
     */
    newLineKind?: "auto" | "crlf" | "lf" | "system";
    /**
     * If braces should be used or not.
     * @default "maintain"
     * @value "maintain" - Uses braces if they're used. Doesn't use braces if they're not used.
     * @value "always" - Forces the use of braces. Will add them if they aren't used.
     * @value "preferNone" - Forces no braces when when the header is one line and body is one line. Otherwise forces braces.
     */
    useBraces?: "maintain" | "always" | "preferNone";
    /**
     * Where to place the brace.
     * @default "nextLineIfHanging"
     * @value "maintain" - Maintains the brace being on the next line or the current line.
     * @value "currentLine" - Forces the brace to be on the current line.
     * @value "nextLine" - Forces the brace to be on the next line.
     * @value "nextLineIfHanging" - Forces the brace to be on the next line if the current line is hanging, but otherwise uses the next.
     */
    bracePosition?: "maintain" | "currentLine" | "nextLine" | "nextLineIfHanging";
    /**
     * Where to place the next control flow within a control flow statement.
     * @default "nextLine"
     * @value "maintain" - Maintains the next control flow being on the next line or the current line.
     * @value "currentLine" - Forces the next control flow to be on the current line.
     * @value "nextLine" - Forces the next control flow to be on the next line.
     */
    nextControlFlowPosition?: "maintain" | "currentLine" | "nextLine";
    "directive.semiColon"?: boolean;
    "doWhileStatement.semiColon"?: boolean;
    "expressionStatement.semiColon"?: boolean;
    "ifStatement.semiColon"?: boolean;
    "importDeclaration.semiColon"?: boolean;
    "typeAlias.semiColon"?: boolean;
    /**
     * If braces should be used or not.
     * @default "maintain"
     * @value "maintain" - Uses braces if they're used. Doesn't use braces if they're not used.
     * @value "always" - Forces the use of braces. Will add them if they aren't used.
     * @value "preferNone" - Forces no braces when when the header is one line and body is one line. Otherwise forces braces.
     */
    "ifStatement.useBraces"?: "maintain" | "always" | "preferNone";
    /**
     * If braces should be used or not.
     * @default "maintain"
     * @value "maintain" - Uses braces if they're used. Doesn't use braces if they're not used.
     * @value "always" - Forces the use of braces. Will add them if they aren't used.
     * @value "preferNone" - Forces no braces when when the header is one line and body is one line. Otherwise forces braces.
     */
    "whileStatement.useBraces"?: "maintain" | "always" | "preferNone";
    /**
     * Where to place the brace.
     * @default "nextLineIfHanging"
     * @value "maintain" - Maintains the brace being on the next line or the current line.
     * @value "currentLine" - Forces the brace to be on the current line.
     * @value "nextLine" - Forces the brace to be on the next line.
     * @value "nextLineIfHanging" - Forces the brace to be on the next line if the current line is hanging, but otherwise uses the next.
     */
    "classDeclaration.bracePosition"?: "maintain" | "currentLine" | "nextLine" | "nextLineIfHanging";
    /**
     * Where to place the brace.
     * @default "nextLineIfHanging"
     * @value "maintain" - Maintains the brace being on the next line or the current line.
     * @value "currentLine" - Forces the brace to be on the current line.
     * @value "nextLine" - Forces the brace to be on the next line.
     * @value "nextLineIfHanging" - Forces the brace to be on the next line if the current line is hanging, but otherwise uses the next.
     */
    "doWhileStatement.bracePosition"?: "maintain" | "currentLine" | "nextLine" | "nextLineIfHanging";
    /**
     * Where to place the brace.
     * @default "nextLineIfHanging"
     * @value "maintain" - Maintains the brace being on the next line or the current line.
     * @value "currentLine" - Forces the brace to be on the current line.
     * @value "nextLine" - Forces the brace to be on the next line.
     * @value "nextLineIfHanging" - Forces the brace to be on the next line if the current line is hanging, but otherwise uses the next.
     */
    "ifStatement.bracePosition"?: "maintain" | "currentLine" | "nextLine" | "nextLineIfHanging";
    /**
     * Where to place the brace.
     * @default "nextLineIfHanging"
     * @value "maintain" - Maintains the brace being on the next line or the current line.
     * @value "currentLine" - Forces the brace to be on the current line.
     * @value "nextLine" - Forces the brace to be on the next line.
     * @value "nextLineIfHanging" - Forces the brace to be on the next line if the current line is hanging, but otherwise uses the next.
     */
    "tryStatement.bracePosition"?: "maintain" | "currentLine" | "nextLine" | "nextLineIfHanging";
    /**
     * Where to place the brace.
     * @default "nextLineIfHanging"
     * @value "maintain" - Maintains the brace being on the next line or the current line.
     * @value "currentLine" - Forces the brace to be on the current line.
     * @value "nextLine" - Forces the brace to be on the next line.
     * @value "nextLineIfHanging" - Forces the brace to be on the next line if the current line is hanging, but otherwise uses the next.
     */
    "whileStatement.bracePosition"?: "maintain" | "currentLine" | "nextLine" | "nextLineIfHanging";
    /**
     * Where to place the next control flow within a control flow statement.
     * @default "nextLine"
     * @value "maintain" - Maintains the next control flow being on the next line or the current line.
     * @value "currentLine" - Forces the next control flow to be on the current line.
     * @value "nextLine" - Forces the next control flow to be on the next line.
     */
    "ifStatement.nextControlFlowPosition"?: "maintain" | "currentLine" | "nextLine";
    /**
     * Where to place the next control flow within a control flow statement.
     * @default "nextLine"
     * @value "maintain" - Maintains the next control flow being on the next line or the current line.
     * @value "currentLine" - Forces the next control flow to be on the current line.
     * @value "nextLine" - Forces the next control flow to be on the next line.
     */
    "tryStatement.nextControlFlowPosition"?: "maintain" | "currentLine" | "nextLine";
}

/**
 * Resolved configuration from user specified configuration.
 */
export interface ResolvedConfiguration {
    lineWidth: number;
    indentSize: number;
    useTabs: boolean;
    singleQuotes: boolean;
    newLineKind: "auto" | "\r\n" | "\n";

    // semi colons
    "directive.semiColon": boolean;
    "doWhileStatement.semiColon": boolean;
    "expressionStatement.semiColon": boolean;
    "ifStatement.semiColon": boolean;
    "importDeclaration.semiColon": boolean;
    "typeAlias.semiColon": boolean;

    // use braces
    "ifStatement.useBraces": NonNullable<Configuration["useBraces"]>;
    "whileStatement.useBraces": NonNullable<Configuration["useBraces"]>;

    // brace position
    "classDeclaration.bracePosition": NonNullable<Configuration["bracePosition"]>;
    "doWhileStatement.bracePosition": NonNullable<Configuration["bracePosition"]>;
    "ifStatement.bracePosition": NonNullable<Configuration["bracePosition"]>;
    "tryStatement.bracePosition": NonNullable<Configuration["bracePosition"]>;
    "whileStatement.bracePosition": NonNullable<Configuration["bracePosition"]>;

    // next control flow position
    "ifStatement.nextControlFlowPosition": NonNullable<Configuration["nextControlFlowPosition"]>;
    "tryStatement.nextControlFlowPosition": NonNullable<Configuration["nextControlFlowPosition"]>;
}
